/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jinshuai;

import java.util.List;

/**
 *
 * @author 靳帅
 */
public class MyNodeEffects extends NodeEffects<Integer> {
    public MyNodeEffects(Integer data) { super(data); }

    public void setData(Integer data) {
        System.out.println("MyNode.setData");
        super.setData(data);
    }
    
     public static void main(String[] args)
              {
                MyNodeEffects mn = new MyNodeEffects(5);  
                NodeEffects n = mn;         
                n.setData("Hello");       // 会引发抛出ClassCastException
                Integer x = mn.data;    
              }
     
//MyNodeEffects mn = new MyNodeEffects(5);  
//NodeEffects n = (MyNodeEffects)mn;         
//n.setData("Hello");  
//Integer x = (String)mn.data; //会引发抛出ClassCastException  
}


//编译器偷偷做了一个 bridge method：
/*class MyNode extends Node {

    // Bridge method generated by the compiler

    public void setData(Object data) {

        setData((Integer) data);

    }

    public void setData(Integer data) {

        System.out.println("MyNode.setData");

        super.setData(data);

    }

    // ...

}*/


//泛型不能来干什么？
//Cannot Instantiate Generic Types with Primitive Types
class Pair<K, V> {

    private K key;
    private V value;

    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }

    // ...

//Pair<int,char> p = new Pair<>(8, 'a');
//Pair<Integer,Character> p = new Pair<>(8, 'a');


//Cannot Create Instances of Type Parameters
 public static <E> void append(List<E> list, Class<E> cls) throws Exception {
    E elem = cls.newInstance();   // OK
    list.add(elem);
}
//public static <E> void append(List<E> list) {
//    E elem = new E();  // compile-time error
//    list.add(elem);
//} 
}



//Cannot Declare Static Fields Whose Types are Type Parameters
 class MobileDevice<T> {
//    private static T os;

    // ...

//MobileDevice<Smartphone> phone = new MobileDevice<>();
//MobileDevice<Pager> pager = new MobileDevice<>();
//MobileDevice<TabletPC> pc = new MobileDevice<>();

     
     
//Cannot Use Casts or instanceof with Parameterized Types
//static <E> void rtti(List<E> list) {
//    if (list instanceof ArrayList<Integer>) {  // compile-time error
//        // ...
//    }
//}
 }


//Cannot Create Arrays of Parameterized Types
//List<Integer>[] arrayOfLists = new List<Integer>[2];  // compile-time error
//Object[] strings = new String[2];
//strings[0] = "hi";   // OK
//strings[1] = 100;    // An ArrayStoreException is thrown.


//Cannot Create, Catch, or Throw Objects of Parameterized Types
// Extends Throwable indirectly
//class MathException<T> extends Exception { /* ... */ }    // compile-time error
//
//// Extends Throwable directly
//class QueueFullException<T> extends Throwable { /* ... */ // compile-time error
    
//Cannot Overload a Method Where the Formal Parameter Types of Each Overload Erase to the Same Raw Type
// class Example {
//    public void print(Set<String> strSet) { }
//    public void print(Set<Integer> intSet) { }
//}